{"version":3,"file":"static/js/539.81aa30f7.chunk.js","mappings":"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","sources":["common/DurationText/DurationText.tsx","common/constants.ts","components/Loading.tsx","components/Tooltip.tsx","../node_modules/@material-ui/core/esm/Link/Link.js","components/MetadataSection/MetadataSection.tsx","pages/job/JobTaskNameProgressTable/JobTaskNameProgressTable.tsx","pages/job/JobDetail.tsx","pages/job/hook/useJobDetail.ts","components/ProgressBar/ProgressBar.tsx","pages/job/TaskProgressBar.tsx","pages/job/hook/useJobProgress.ts","service/job.ts","../node_modules/@material-ui/icons/FileCopyOutlined.js","../node_modules/@material-ui/icons/HelpOutline.js","../node_modules/copy-to-clipboard/index.js","../node_modules/toggle-selection/index.js"],"sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport dayjs from \"dayjs\";\nimport React, { useEffect, useState } from \"react\";\n\ntype DurationTextProps = {\n  startTime: Date | number;\n  endTime?: Date | number | null;\n};\n\n/**\n * Component that shows an incrementing duration text.\n * This component will smartly rerender more often depending on the size of the duration.\n */\nexport const DurationText = ({ startTime, endTime }: DurationTextProps) => {\n  // Increments to force a re-render.\n  const [, setRerenderCounter] = useState(0);\n\n  // Assume current time, if end time is nullish\n  const endTimeToRender = endTime ? endTime : new Date();\n  const duration = dayjs.duration(\n    dayjs(endTimeToRender).diff(dayjs(startTime)),\n  );\n\n  let durationText: string;\n  let refreshInterval = 1000;\n  if (duration.asMinutes() < 1) {\n    durationText = duration.format(\"s[s]\");\n  } else if (duration.asHours() < 1) {\n    durationText = duration.format(\"m[m] s[s]\");\n  } else if (duration.asDays() < 1) {\n    // Only refresh once per minute\n    durationText = duration.format(\"H[h] m[m]\");\n    refreshInterval = 1000 * 60;\n  } else if (duration.asMonths() < 1) {\n    // Only refresh once per minute\n    durationText = duration.format(\"D[d] H[h]\");\n    refreshInterval = 1000 * 60;\n  } else if (duration.asYears() < 1) {\n    // Only refresh once per hour\n    durationText = duration.format(\"M[M] D[d]\");\n    refreshInterval = 1000 * 60 * 60;\n  } else {\n    // Only refresh once per hour\n    durationText = duration.format(\"Y[y] M[M] D[d]\");\n    refreshInterval = 1000 * 60 * 60;\n  }\n\n  useEffect(() => {\n    if (!endTime) {\n      // Only refresh if this is running job\n      const timeout = setInterval(() => {\n        setRerenderCounter((counter) => counter + 1);\n      }, refreshInterval);\n      return () => {\n        clearInterval(timeout);\n      };\n    }\n  }, [endTime, refreshInterval]);\n\n  return <Typography>{durationText}</Typography>;\n};\n","export const API_REFRESH_INTERVAL_MS = 4000;\n","import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import {\n  createStyles,\n  makeStyles,\n  Tooltip,\n  TooltipProps,\n} from \"@material-ui/core\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport React, { ReactNode } from \"react\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      backgroundColor: theme.palette.background.paper,\n      border: \"1px solid #dadde9\",\n      color: theme.palette.text.primary,\n      padding: theme.spacing(1.5),\n    },\n  }),\n);\n\nexport const StyledTooltip = (props: TooltipProps) => {\n  const classes = useStyles();\n\n  return <Tooltip classes={{ tooltip: classes.root }} {...props} />;\n};\n\nconst useHelpInfoStyles = makeStyles((theme) =>\n  createStyles({\n    helpIcon: {\n      color: theme.palette.grey[500],\n    },\n  }),\n);\n\ntype HelpInfoProps = {\n  children: NonNullable<ReactNode>;\n  className?: string;\n};\n\nexport const HelpInfo = ({ children, className }: HelpInfoProps) => {\n  const classes = useHelpInfoStyles();\n\n  return (\n    <StyledTooltip className={className} interactive title={children}>\n      <HelpOutlineIcon fontSize=\"small\" className={classes.helpIcon} />\n    </StyledTooltip>\n  );\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport capitalize from '../utils/capitalize';\nimport withStyles from '../styles/withStyles';\nimport { elementTypeAcceptingRef } from '@material-ui/utils';\nimport useIsFocusVisible from '../utils/useIsFocusVisible';\nimport useForkRef from '../utils/useForkRef';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the root element if `underline=\"none\"`. */\n  underlineNone: {\n    textDecoration: 'none'\n  },\n\n  /* Styles applied to the root element if `underline=\"hover\"`. */\n  underlineHover: {\n    textDecoration: 'none',\n    '&:hover': {\n      textDecoration: 'underline'\n    }\n  },\n\n  /* Styles applied to the root element if `underline=\"always\"`. */\n  underlineAlways: {\n    textDecoration: 'underline'\n  },\n  // Same reset as ButtonBase.root\n\n  /* Styles applied to the root element if `component=\"button\"`. */\n  button: {\n    position: 'relative',\n    WebkitTapHighlightColor: 'transparent',\n    backgroundColor: 'transparent',\n    // Reset default value\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    border: 0,\n    margin: 0,\n    // Remove the margin in Safari\n    borderRadius: 0,\n    padding: 0,\n    // Remove the padding in Firefox\n    cursor: 'pointer',\n    userSelect: 'none',\n    verticalAlign: 'middle',\n    '-moz-appearance': 'none',\n    // Reset\n    '-webkit-appearance': 'none',\n    // Reset\n    '&::-moz-focus-inner': {\n      borderStyle: 'none' // Remove Firefox dotted outline.\n\n    },\n    '&$focusVisible': {\n      outline: 'auto'\n    }\n  },\n\n  /* Pseudo-class applied to the root element if the link is keyboard focused. */\n  focusVisible: {}\n};\nvar Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'a' : _props$component,\n      onBlur = props.onBlur,\n      onFocus = props.onFocus,\n      TypographyClasses = props.TypographyClasses,\n      _props$underline = props.underline,\n      underline = _props$underline === void 0 ? 'hover' : _props$underline,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'inherit' : _props$variant,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"color\", \"component\", \"onBlur\", \"onFocus\", \"TypographyClasses\", \"underline\", \"variant\"]);\n\n  var _useIsFocusVisible = useIsFocusVisible(),\n      isFocusVisible = _useIsFocusVisible.isFocusVisible,\n      onBlurVisible = _useIsFocusVisible.onBlurVisible,\n      focusVisibleRef = _useIsFocusVisible.ref;\n\n  var _React$useState = React.useState(false),\n      focusVisible = _React$useState[0],\n      setFocusVisible = _React$useState[1];\n\n  var handlerRef = useForkRef(ref, focusVisibleRef);\n\n  var handleBlur = function handleBlur(event) {\n    if (focusVisible) {\n      onBlurVisible();\n      setFocusVisible(false);\n    }\n\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (isFocusVisible(event)) {\n      setFocusVisible(true);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    className: clsx(classes.root, classes[\"underline\".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),\n    classes: TypographyClasses,\n    color: color,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: handlerRef,\n    variant: variant\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes = {\n  /**\n   * The content of the link.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the link.\n   */\n  color: PropTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * `classes` prop applied to the [`Typography`](/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n\n  /**\n   * Controls when the link should have an underline.\n   */\n  underline: PropTypes.oneOf(['none', 'hover', 'always']),\n\n  /**\n   * Applies the theme typography styles.\n   */\n  variant: PropTypes.string\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiLink'\n})(Link);","import {\n  Box,\n  createStyles,\n  IconButton,\n  Link,\n  makeStyles,\n  Paper,\n  Tooltip,\n  Typography,\n} from \"@material-ui/core\";\nimport FileCopyOutlined from \"@material-ui/icons/FileCopyOutlined\";\nimport copy from \"copy-to-clipboard\";\nimport React, { useState } from \"react\";\nimport { Link as RouterLink } from \"react-router-dom\";\nimport { HelpInfo } from \"../Tooltip\";\n\nexport type StringOnlyMetadataContent = {\n  readonly value: string;\n};\n\ntype LinkableMetadataContent = StringOnlyMetadataContent & {\n  readonly link: string;\n};\n\ntype CopyableMetadataContent = StringOnlyMetadataContent & {\n  /**\n   * The \"copyable value\" may be different from \"value\"\n   * in case we want to render a more readable text.\n   */\n  readonly copyableValue: string;\n};\n\nexport type Metadata = {\n  readonly label: string;\n  readonly labelTooltip?: string | JSX.Element;\n\n  // If content is undefined, we display \"-\" as the placeholder.\n  readonly content?:\n    | StringOnlyMetadataContent\n    | LinkableMetadataContent\n    | CopyableMetadataContent\n    | JSX.Element;\n\n  /**\n   * This flag will determine this metadata field will show in the UI.\n   * Defaults to true.\n   */\n  readonly isAvailable?: boolean;\n};\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(3, minmax(0, 1fr))\",\n      rowGap: theme.spacing(1),\n      columnGap: theme.spacing(4),\n      padding: theme.spacing(2),\n    },\n    label: {\n      color: theme.palette.text.secondary,\n    },\n    labelTooltip: {\n      marginLeft: theme.spacing(0.5),\n    },\n    contentContainer: {\n      display: \"flex\",\n      alignItems: \"center\",\n    },\n    content: {\n      display: \"block\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\",\n      whiteSpace: \"nowrap\",\n    },\n    button: {\n      color: \"black\",\n      marginLeft: theme.spacing(0.5),\n    },\n  }),\n);\n\n/**\n * We style the metadata content based on the type supplied.\n *\n * A default style will be applied if content is MetadataContent type.\n * If content is undefined, we display \"-\" as the placeholder.\n */\nexport const MetadataContentField: React.FC<{\n  content: Metadata[\"content\"];\n}> = ({ content }) => {\n  const classes = useStyles();\n  const [copyIconClicked, setCopyIconClicked] = useState<boolean>(false);\n\n  if (content === undefined || \"value\" in content) {\n    return content === undefined || !(\"link\" in content) ? (\n      <div className={classes.contentContainer}>\n        <Typography\n          className={classes.content}\n          variant=\"body2\"\n          title={content?.value}\n        >\n          {content?.value ?? \"-\"}\n        </Typography>\n        {content && \"copyableValue\" in content && (\n          <Tooltip\n            placement=\"top\"\n            title={copyIconClicked ? \"Copied\" : \"Click to copy\"}\n          >\n            <IconButton\n              aria-label=\"copy\"\n              onClick={() => {\n                setCopyIconClicked(true);\n                copy(content.copyableValue);\n              }}\n              // Set up mouse events to avoid text changing while tooltip is visible\n              onMouseEnter={() => setCopyIconClicked(false)}\n              onMouseLeave={() =>\n                setTimeout(() => setCopyIconClicked(false), 333)\n              }\n              size=\"small\"\n              className={classes.button}\n            >\n              <FileCopyOutlined />\n            </IconButton>\n          </Tooltip>\n        )}\n      </div>\n    ) : content.link.startsWith(\"http\") ? (\n      <Link className={classes.content} href={content.link}>\n        {content.value}\n      </Link>\n    ) : (\n      <Link\n        className={classes.content}\n        component={RouterLink}\n        to={content.link}\n      >\n        {content.value}\n      </Link>\n    );\n  }\n  return content;\n};\n\n/**\n * Renders the metadata list in a column format.\n */\nconst MetadataList: React.FC<{\n  metadataList: Metadata[];\n}> = ({ metadataList }) => {\n  const classes = useStyles();\n\n  const filteredMetadataList = metadataList.filter(\n    ({ isAvailable }) => isAvailable ?? true,\n  );\n  return (\n    <Box className={classes.root}>\n      {filteredMetadataList.map(({ label, labelTooltip, content }, idx) => (\n        <Box key={idx} flex={1} paddingTop={0.5} paddingBottom={0.5}>\n          <Box display=\"flex\" alignItems=\"center\" marginBottom={0.5}>\n            <Typography className={classes.label} variant=\"body2\">\n              {label}\n            </Typography>\n            {labelTooltip && (\n              <HelpInfo className={classes.labelTooltip}>\n                {labelTooltip}\n              </HelpInfo>\n            )}\n          </Box>\n          <MetadataContentField content={content} />\n        </Box>\n      ))}\n    </Box>\n  );\n};\n\n/**\n * Renders the Metadata UI with the header and metadata in a 3-column format.\n */\nexport const MetadataSection = ({\n  header,\n  metadataList,\n}: {\n  header?: string;\n  metadataList: Metadata[];\n}) => {\n  return (\n    <Box marginTop={1} marginBottom={4}>\n      {header && (\n        <Box paddingBottom={2}>\n          <Typography variant=\"h2\">{header}</Typography>\n        </Box>\n      )}\n      <Paper variant=\"outlined\">\n        <MetadataList metadataList={metadataList} />\n      </Paper>\n    </Box>\n  );\n};\n","import {\n  Box,\n  createStyles,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { Pagination } from \"@material-ui/lab\";\nimport React, { ReactElement } from \"react\";\nimport { ClassNameProps } from \"../../../common/props\";\nimport { HelpInfo } from \"../../../components/Tooltip\";\nimport { useJobProgressByTaskName } from \"../hook/useJobProgress\";\nimport { MiniTaskProgressBar } from \"../TaskProgressBar\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    helpInfo: {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n);\n\nconst columns: { label: string; helpInfo?: ReactElement }[] = [\n  { label: \"Task name\" },\n  { label: \"Failed\" },\n  { label: \"Active\" },\n  { label: \"Finished\" },\n  { label: \"Tasks\" },\n];\n\nexport type JobTaskNameProgressTableProps = {\n  jobId: string;\n} & ClassNameProps;\n\nexport const JobTaskNameProgressTable = ({\n  jobId,\n  className,\n}: JobTaskNameProgressTableProps) => {\n  const classes = useStyles();\n\n  const { progress, page, setPage, total } = useJobProgressByTaskName(jobId);\n\n  return (\n    <TableContainer className={className}>\n      <div>\n        <Pagination\n          count={Math.ceil(total / page.pageSize)}\n          page={page.pageNo}\n          onChange={(_, pageNo) => setPage(pageNo)}\n        />\n      </div>\n      <Table>\n        <TableHead>\n          <TableRow>\n            {columns.map(({ label, helpInfo }) => (\n              <TableCell align=\"center\" key={label}>\n                <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                  {label}\n                  {helpInfo && (\n                    <HelpInfo className={classes.helpInfo}>{helpInfo}</HelpInfo>\n                  )}\n                </Box>\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {progress.map(\n            ({ name, progress, numFailed, numActive, numFinished }) => {\n              return (\n                <TableRow key={name}>\n                  <TableCell align=\"center\">{name}</TableCell>\n                  <TableCell align=\"center\">{numFailed}</TableCell>\n                  <TableCell align=\"center\">{numActive}</TableCell>\n                  <TableCell align=\"center\">{numFinished}</TableCell>\n                  <TableCell>\n                    <MiniTaskProgressBar {...progress} />\n                  </TableCell>\n                </TableRow>\n              );\n            },\n          )}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","import { makeStyles } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\nimport dayjs from \"dayjs\";\nimport React from \"react\";\nimport { DurationText } from \"../../common/DurationText\";\nimport Loading from \"../../components/Loading\";\nimport { MetadataSection } from \"../../components/MetadataSection\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\n\nimport { useJobDetail } from \"./hook/useJobDetail\";\nimport { useJobProgress } from \"./hook/useJobProgress\";\nimport { JobTaskNameProgressTable } from \"./JobTaskNameProgressTable\";\nimport { TaskProgressBar } from \"./TaskProgressBar\";\n\nconst useStyle = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n  taskProgressTable: {\n    marginTop: theme.spacing(2),\n  },\n}));\n\nconst JobDetailPage = () => {\n  const classes = useStyle();\n  const { job, msg, params } = useJobDetail();\n  const jobId = params.id;\n  const { progress, error, driverExists } = useJobProgress(jobId);\n\n  if (!job) {\n    return (\n      <div className={classes.root}>\n        <Loading loading={msg.startsWith(\"Loading\")} />\n        <TitleCard title={`JOB - ${params.id}`}>\n          <StatusChip type=\"job\" status=\"LOADING\" />\n          <br />\n          Request Status: {msg} <br />\n        </TitleCard>\n      </div>\n    );\n  }\n\n  const tasksSectionContents = (() => {\n    if (!driverExists) {\n      return <TaskProgressBar />;\n    }\n    const { status } = job;\n    if (!progress || error) {\n      return (\n        <Alert severity=\"warning\">\n          No tasks visualizations because prometheus is not detected. Please\n          make sure prometheus is running and refresh this page. See:{\" \"}\n          <a\n            href=\"https://docs.ray.io/en/latest/ray-observability/ray-metrics.html\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            https://docs.ray.io/en/latest/ray-observability/ray-metrics.html\n          </a>\n          .\n          <br />\n          If you are hosting prometheus on a separate machine or using a\n          non-default port, please set the RAY_PROMETHEUS_HOST env var to point\n          to your prometheus server when launching ray.\n        </Alert>\n      );\n    }\n    if (status === \"SUCCEEDED\" || status === \"FAILED\") {\n      return (\n        <React.Fragment>\n          <TaskProgressBar {...progress} showAsComplete />\n          <JobTaskNameProgressTable\n            className={classes.taskProgressTable}\n            jobId={jobId}\n          />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <TaskProgressBar {...progress} />\n          <JobTaskNameProgressTable\n            className={classes.taskProgressTable}\n            jobId={jobId}\n          />\n        </React.Fragment>\n      );\n    }\n  })();\n\n  return (\n    <div className={classes.root}>\n      <TitleCard title={`JOB - ${params.id}`}>\n        <MetadataSection\n          metadataList={[\n            {\n              label: \"Entrypoint\",\n              content: job.entrypoint\n                ? {\n                    value: job.entrypoint,\n                    copyableValue: job.entrypoint,\n                  }\n                : { value: \"-\" },\n            },\n            {\n              label: \"Status\",\n              content: <StatusChip type=\"job\" status={job.status} />,\n            },\n            {\n              label: \"Job ID\",\n              content: job.job_id\n                ? {\n                    value: job.job_id,\n                    copyableValue: job.job_id,\n                  }\n                : { value: \"-\" },\n            },\n            {\n              label: \"Submission ID\",\n              content: job.submission_id\n                ? {\n                    value: job.submission_id,\n                    copyableValue: job.submission_id,\n                  }\n                : {\n                    value: \"-\",\n                  },\n            },\n            {\n              label: \"Duration\",\n              content: job.start_time ? (\n                <DurationText\n                  startTime={job.start_time}\n                  endTime={job.end_time}\n                />\n              ) : (\n                <React.Fragment>-</React.Fragment>\n              ),\n            },\n            {\n              label: \"Started at\",\n              content: {\n                value: job.start_time\n                  ? dayjs(Number(job.start_time)).format(\"YYYY/MM/DD HH:mm:ss\")\n                  : \"-\",\n              },\n            },\n            {\n              label: \"Ended at\",\n              content: {\n                value: job.end_time\n                  ? dayjs(Number(job.end_time)).format(\"YYYY/MM/DD HH:mm:ss\")\n                  : \"-\",\n              },\n            },\n          ]}\n        />\n      </TitleCard>\n      <TitleCard title=\"Tasks\">{tasksSectionContents}</TitleCard>\n    </div>\n  );\n};\n\nexport default JobDetailPage;\n","import { useContext, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport { GlobalContext } from \"../../../App\";\nimport { API_REFRESH_INTERVAL_MS } from \"../../../common/constants\";\nimport { getJobDetail } from \"../../../service/job\";\n\nexport const useJobDetail = () => {\n  const params = useParams() as { id: string };\n  const [msg, setMsg] = useState(\"Loading the job detail\");\n  const [refreshing, setRefresh] = useState(true);\n  const { ipLogMap } = useContext(GlobalContext);\n  const { data: job } = useSWR(\n    \"useJobDetail\",\n    async () => {\n      try {\n        const rsp = await getJobDetail(params.id);\n        return rsp.data;\n      } catch (e) {\n        setMsg(\"Job Query Error Please Check JobId\");\n        setRefresh(false);\n      }\n    },\n    { refreshInterval: refreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  return {\n    job,\n    msg,\n    params,\n    ipLogMap,\n  };\n};\n","import {\n  createStyles,\n  makeStyles,\n  Paper,\n  TooltipProps,\n  Typography,\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { StyledTooltip } from \"../Tooltip\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    legendRoot: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      marginBottom: theme.spacing(2),\n    },\n    legendItemContainer: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n      \"&:not(:first-child)\": {\n        marginLeft: theme.spacing(1.5),\n      },\n      \"&:not(:last-child)\": {\n        marginRight: theme.spacing(1.5),\n      },\n    },\n    colorLegend: {\n      width: 16,\n      height: 16,\n      borderRadius: 4,\n      marginRight: theme.spacing(1),\n    },\n    progressBarRoot: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      width: \"100%\",\n      height: 8,\n      backgroundColor: \"white\",\n      borderRadius: 6,\n      overflow: \"hidden\",\n    },\n    segment: {\n      \"&:not(:last-child)\": {\n        marginRight: 1,\n      },\n    },\n  }),\n);\n\nexport type ProgressBarSegment = {\n  /**\n   * Number of items in this segment\n   */\n  value: number;\n  /**\n   * Name of this segment\n   */\n  label: string;\n  /**\n   * A CSS color used to represent the segment.\n   */\n  color: string;\n};\n\nexport type ProgressBarProps = {\n  /**\n   * The different segments to the progress bar.\n   * The order determines the order of which we show the segments on the page.\n   * Ex: [Succeeded: 5, Running: 2, Pending: 10]\n   */\n  progress: ProgressBarSegment[];\n  /**\n   * The expected total number of items. If not provided, we calculate the total\n   * from the sum of the segments.\n   *\n   * If the sum of the values from each segment is less than total, then we create\n   * an additional segment for unaccounted items. This additional segment is placed\n   * at the end.\n   */\n  total?: number;\n  /**\n   * Label for unaccounted for items i.e. items that are not part of a `progress` segment.\n   */\n  unaccountedLabel?: string;\n  /**\n   * Whether a legend is shown. Default to true.\n   */\n  showLegend?: boolean;\n  /**\n   * Whether to show the a legend as a tooltip.\n   */\n  showTooltip?: boolean;\n};\n\nexport const ProgressBar = ({\n  progress,\n  total,\n  unaccountedLabel,\n  showLegend = true,\n  showTooltip = false,\n}: ProgressBarProps) => {\n  const classes = useStyles();\n  const segmentTotal = progress.reduce((acc, { value }) => acc + value, 0);\n  const finalTotal = total ?? segmentTotal;\n\n  // TODO(aguo): Handle total being > segmentTotal\n  const segments =\n    segmentTotal < finalTotal\n      ? [\n          ...progress,\n          {\n            value: finalTotal - segmentTotal,\n            label: unaccountedLabel ?? \"unaccounted\",\n            color: \"#EEEEEE\",\n          },\n        ]\n      : progress;\n\n  const filteredSegments = segments.filter(({ value }) => value);\n\n  return (\n    <div className={classes.root}>\n      {showLegend && (\n        <div className={classes.legendRoot}>\n          <div className={classes.legendItemContainer}>\n            <div\n              className={classes.colorLegend}\n              style={{ backgroundColor: \"black\" }}\n            />\n            <Typography>Total: {finalTotal}</Typography>\n          </div>\n          {filteredSegments.map(({ value, label, color }) => (\n            <div key={label} className={classes.legendItemContainer}>\n              <div\n                className={classes.colorLegend}\n                style={{ backgroundColor: color }}\n              />\n              <Typography>\n                {label}: {value}\n              </Typography>\n            </div>\n          ))}\n        </div>\n      )}\n      <LegendTooltip\n        showTooltip={showTooltip}\n        total={finalTotal}\n        segments={filteredSegments}\n      >\n        <div\n          className={classes.progressBarRoot}\n          style={{\n            backgroundColor: segmentTotal === 0 ? \"lightGrey\" : \"white\",\n          }}\n        >\n          {filteredSegments.map(({ color, label, value }) => (\n            <span\n              key={label}\n              className={classes.segment}\n              style={{\n                flex: value,\n                backgroundColor: color,\n              }}\n              data-testid=\"progress-bar-segment\"\n            />\n          ))}\n        </div>\n      </LegendTooltip>\n    </div>\n  );\n};\n\nconst useLegendStyles = makeStyles((theme) =>\n  createStyles({\n    legendItemContainer: {\n      display: \"flex\",\n      flexDirection: \"row\",\n      flexWrap: \"nowrap\",\n      alignItems: \"center\",\n      \"&:not(:first-child)\": {\n        marginTop: theme.spacing(1),\n      },\n    },\n    colorLegend: {\n      width: 16,\n      height: 16,\n      borderRadius: 4,\n      marginRight: theme.spacing(1),\n    },\n  }),\n);\n\ntype LegendTooltipProps = {\n  showTooltip: boolean;\n  segments: ProgressBarSegment[];\n  total: number;\n  children: TooltipProps[\"children\"];\n};\n\nconst LegendTooltip = ({\n  showTooltip,\n  segments,\n  total,\n  children,\n}: LegendTooltipProps) => {\n  const classes = useLegendStyles();\n\n  if (showTooltip) {\n    return (\n      <StyledTooltip\n        placement=\"right\"\n        title={\n          <Paper>\n            <div className={classes.legendItemContainer}>\n              <div\n                className={classes.colorLegend}\n                style={{ backgroundColor: \"black\" }}\n              />\n              <Typography>Total: {total}</Typography>\n            </div>\n            {segments.map(({ value, label, color }) => (\n              <div key={label} className={classes.legendItemContainer}>\n                <div\n                  className={classes.colorLegend}\n                  style={{ backgroundColor: color }}\n                />\n                <Typography>\n                  {label}: {value}\n                </Typography>\n              </div>\n            ))}\n          </Paper>\n        }\n      >\n        {children}\n      </StyledTooltip>\n    );\n  }\n\n  return children;\n};\n","import { Theme } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport React from \"react\";\nimport { ProgressBar, ProgressBarSegment } from \"../../components/ProgressBar\";\nimport { TaskProgress } from \"../../type/job\";\n\nexport type TaskProgressBarProps = TaskProgress & {\n  showAsComplete?: boolean;\n  showTooltip?: boolean;\n};\n\nexport const TaskProgressBar = ({\n  numFinished = 0,\n  numRunning = 0,\n  numPendingArgsAvail = 0,\n  numPendingNodeAssignment = 0,\n  numSubmittedToWorker = 0,\n  numFailed = 0,\n  numUnknown = 0,\n  showAsComplete = false,\n  showTooltip = true,\n}: TaskProgressBarProps) => {\n  const theme = useTheme<Theme>();\n  if (showAsComplete) {\n    const total =\n      numFinished +\n      numRunning +\n      numPendingArgsAvail +\n      numPendingNodeAssignment +\n      numSubmittedToWorker +\n      numFailed +\n      numUnknown;\n    return (\n      <ProgressBar\n        progress={[\n          {\n            label: \"Finished\",\n            value: total - numFailed,\n            color: theme.palette.success.main,\n          },\n          {\n            label: \"Failed\",\n            value: numFailed,\n            color: theme.palette.error.main,\n          },\n        ]}\n        showTooltip={showTooltip}\n      />\n    );\n  } else {\n    const progress: ProgressBarSegment[] = [\n      {\n        label: \"Finished\",\n        value: numFinished,\n        color: theme.palette.success.main,\n      },\n      {\n        label: \"Failed\",\n        value: numFailed,\n        color: theme.palette.error.main,\n      },\n      {\n        label: \"Running\",\n        value: numRunning,\n        color: theme.palette.primary.main,\n      },\n      {\n        label: \"Waiting for scheduling\",\n        value: numPendingNodeAssignment + numSubmittedToWorker,\n        color: \"#cfcf08\",\n      },\n      {\n        label: \"Waiting for dependencies\",\n        value: numPendingArgsAvail,\n        color: \"#f79e02\",\n      },\n      {\n        label: \"Unknown\",\n        value: numUnknown,\n        color: \"#5f6469\",\n      },\n    ];\n    return <ProgressBar progress={progress} />;\n  }\n};\n\nexport type MiniTaskProgressBarProps = TaskProgress & {\n  /**\n   * Whether to color the entire progress bar as complete.\n   * For example, when the job is complete.\n   */\n  showAsComplete?: boolean;\n  /**\n   * Whether to show tooltip.\n   */\n  showTooltip?: boolean;\n};\n\nexport const MiniTaskProgressBar = ({\n  numFinished = 0,\n  numRunning = 0,\n  numPendingArgsAvail = 0,\n  numPendingNodeAssignment = 0,\n  numSubmittedToWorker = 0,\n  numUnknown = 0,\n  numFailed = 0,\n  showAsComplete = false,\n  showTooltip = true,\n}: MiniTaskProgressBarProps) => {\n  const theme = useTheme<Theme>();\n  if (showAsComplete) {\n    const total =\n      numFinished +\n      numRunning +\n      numPendingArgsAvail +\n      numPendingNodeAssignment +\n      numSubmittedToWorker +\n      numFailed +\n      numUnknown;\n    return (\n      <ProgressBar\n        progress={[\n          {\n            label: \"Finished\",\n            value: total - numFailed,\n            color: theme.palette.success.main,\n          },\n          {\n            label: \"Failed\",\n            value: numFailed,\n            color: theme.palette.error.main,\n          },\n        ]}\n        showLegend={false}\n        showTooltip={showTooltip}\n      />\n    );\n  } else {\n    const progress: ProgressBarSegment[] = [\n      {\n        label: \"Finished\",\n        value: numFinished,\n        color: theme.palette.success.main,\n      },\n      {\n        label: \"Failed\",\n        value: numFailed,\n        color: theme.palette.error.main,\n      },\n      {\n        label: \"Running\",\n        value: numRunning,\n        color: theme.palette.primary.main,\n      },\n      {\n        label: \"Waiting for scheduling\",\n        value: numPendingNodeAssignment + numSubmittedToWorker,\n        color: \"#cfcf08\",\n      },\n      {\n        label: \"Waiting for dependencies\",\n        value: numPendingArgsAvail,\n        color: \"#f79e02\",\n      },\n      {\n        label: \"Unknown\",\n        value: numUnknown,\n        color: \"#5f6469\",\n      },\n    ];\n    return (\n      <ProgressBar\n        progress={progress}\n        showLegend={false}\n        showTooltip={showTooltip}\n      />\n    );\n  }\n};\n","import _ from \"lodash\";\nimport { useRef, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { API_REFRESH_INTERVAL_MS } from \"../../../common/constants\";\nimport { getJobProgress, getJobProgressByTaskName } from \"../../../service/job\";\n\n/**\n * Hook for fetching a job's task progress.\n * Refetches every 4 seconds unless refresh switch is toggled off.\n *\n * If jobId is not provided, will fetch the task progress across all jobs.\n * @param jobId The id of the job whose task progress to fetch or undefined\n *              to fetch all progress for all jobs\n */\nexport const useJobProgress = (jobId?: string) => {\n  const [msg, setMsg] = useState(\"Loading progress...\");\n  const [error, setError] = useState(false);\n  const [isRefreshing, setRefresh] = useState(true);\n  const refreshRef = useRef(isRefreshing);\n  const onSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  refreshRef.current = isRefreshing;\n  const { data: progress } = useSWR(\n    jobId ? [\"useJobProgress\", jobId] : null,\n    async (_, jobId) => {\n      const rsp = await getJobProgress(jobId);\n\n      setMsg(rsp.data.msg);\n      if (rsp.data.result) {\n        return rsp.data.data.detail;\n      } else {\n        setError(true);\n        setRefresh(false);\n      }\n    },\n    { refreshInterval: isRefreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  const driverExists = !jobId ? false : true;\n  return {\n    progress,\n    msg,\n    error,\n    isRefreshing,\n    onSwitchChange,\n    driverExists,\n  };\n};\n\n/**\n * Hook for fetching a job's task progress grouped by task name.\n * Refetches every 4 seconds unless refresh switch is toggled off.\n *\n * If jobId is not provided, will fetch the task progress across all jobs.\n * @param jobId The id of the job whose task progress to fetch or undefined\n *              to fetch all progress for all jobs\n */\nexport const useJobProgressByTaskName = (jobId: string) => {\n  const [page, setPage] = useState(1);\n  const [msg, setMsg] = useState(\"Loading progress...\");\n  const [error, setError] = useState(false);\n  const [isRefreshing, setRefresh] = useState(true);\n  const refreshRef = useRef(isRefreshing);\n  const onSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  refreshRef.current = isRefreshing;\n\n  const { data: progress } = useSWR(\n    [\"useJobProgressByTaskName\", jobId],\n    async (_, jobId) => {\n      const rsp = await getJobProgressByTaskName(jobId);\n      setMsg(rsp.data.msg);\n\n      if (rsp.data.result) {\n        return rsp.data.data.detail;\n      } else {\n        setError(true);\n        setRefresh(false);\n      }\n    },\n    { refreshInterval: isRefreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  const tasks = progress?.tasks ?? [];\n  const tasksWithTotals = tasks.map((task) => {\n    const {\n      numFailed = 0,\n      numPendingArgsAvail = 0,\n      numPendingNodeAssignment = 0,\n      numRunning = 0,\n      numSubmittedToWorker = 0,\n      numFinished = 0,\n    } = task.progress;\n\n    const numActive =\n      numPendingArgsAvail +\n      numPendingNodeAssignment +\n      numRunning +\n      numSubmittedToWorker;\n\n    return { ...task, numFailed, numActive, numFinished };\n  });\n  const sortedTasks = _.orderBy(\n    tasksWithTotals,\n    [\"numFailed\", \"numActive\", \"numFinished\"],\n    [\"desc\", \"desc\", \"desc\"],\n  );\n  const paginatedTasks = sortedTasks.slice((page - 1) * 10, page * 10);\n\n  return {\n    progress: paginatedTasks,\n    page: { pageNo: page, pageSize: 10 },\n    total: tasks.length,\n    setPage,\n    msg,\n    error,\n    isRefreshing,\n    onSwitchChange,\n  };\n};\n","import {\n  JobListRsp,\n  JobProgressByTaskNameRsp,\n  JobProgressRsp,\n  UnifiedJob,\n} from \"../type/job\";\nimport { get } from \"./requestHandlers\";\n\nexport const getJobList = () => {\n  return get<JobListRsp>(\"api/jobs/\");\n};\n\nexport const getJobDetail = (id: string) => {\n  return get<UnifiedJob>(`api/jobs/${id}`);\n};\n\nexport const getJobProgress = (jobId?: string) => {\n  const jobIdQuery = jobId ? `?job_id=${jobId}` : \"\";\n  return get<JobProgressRsp>(`api/progress${jobIdQuery}`);\n};\n\nexport const getJobProgressByTaskName = (jobId: string) => {\n  return get<JobProgressByTaskNameRsp>(\n    `api/progress_by_task_name?job_id=${jobId}`,\n  );\n};\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4H8c-1.1 0-1.99.9-1.99 2L6 21c0 1.1.89 2 1.99 2H19c1.1 0 2-.9 2-2V11l-6-6zM8 21V7h6v5h5v9H8z\"\n}), 'FileCopyOutlined');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\"\n}), 'HelpOutline');\n\nexports.default = _default;","\"use strict\";\n\nvar deselectCurrent = require(\"toggle-selection\");\n\nvar clipboardToIE11Formatting = {\n  \"text/plain\": \"Text\",\n  \"text/html\": \"Url\",\n  \"default\": \"Text\"\n}\n\nvar defaultMessage = \"Copy to clipboard: #{key}, Enter\";\n\nfunction format(message) {\n  var copyKey = (/mac os x/i.test(navigator.userAgent) ? \"⌘\" : \"Ctrl\") + \"+C\";\n  return message.replace(/#{\\s*key\\s*}/g, copyKey);\n}\n\nfunction copy(text, options) {\n  var debug,\n    message,\n    reselectPrevious,\n    range,\n    selection,\n    mark,\n    success = false;\n  if (!options) {\n    options = {};\n  }\n  debug = options.debug || false;\n  try {\n    reselectPrevious = deselectCurrent();\n\n    range = document.createRange();\n    selection = document.getSelection();\n\n    mark = document.createElement(\"span\");\n    mark.textContent = text;\n    // avoid screen readers from reading out loud the text\n    mark.ariaHidden = \"true\"\n    // reset user styles for span element\n    mark.style.all = \"unset\";\n    // prevents scrolling to the end of the page\n    mark.style.position = \"fixed\";\n    mark.style.top = 0;\n    mark.style.clip = \"rect(0, 0, 0, 0)\";\n    // used to preserve spaces and line breaks\n    mark.style.whiteSpace = \"pre\";\n    // do not inherit user-select (it may be `none`)\n    mark.style.webkitUserSelect = \"text\";\n    mark.style.MozUserSelect = \"text\";\n    mark.style.msUserSelect = \"text\";\n    mark.style.userSelect = \"text\";\n    mark.addEventListener(\"copy\", function(e) {\n      e.stopPropagation();\n      if (options.format) {\n        e.preventDefault();\n        if (typeof e.clipboardData === \"undefined\") { // IE 11\n          debug && console.warn(\"unable to use e.clipboardData\");\n          debug && console.warn(\"trying IE specific stuff\");\n          window.clipboardData.clearData();\n          var format = clipboardToIE11Formatting[options.format] || clipboardToIE11Formatting[\"default\"]\n          window.clipboardData.setData(format, text);\n        } else { // all other browsers\n          e.clipboardData.clearData();\n          e.clipboardData.setData(options.format, text);\n        }\n      }\n      if (options.onCopy) {\n        e.preventDefault();\n        options.onCopy(e.clipboardData);\n      }\n    });\n\n    document.body.appendChild(mark);\n\n    range.selectNodeContents(mark);\n    selection.addRange(range);\n\n    var successful = document.execCommand(\"copy\");\n    if (!successful) {\n      throw new Error(\"copy command was unsuccessful\");\n    }\n    success = true;\n  } catch (err) {\n    debug && console.error(\"unable to copy using execCommand: \", err);\n    debug && console.warn(\"trying IE specific stuff\");\n    try {\n      window.clipboardData.setData(options.format || \"text\", text);\n      options.onCopy && options.onCopy(window.clipboardData);\n      success = true;\n    } catch (err) {\n      debug && console.error(\"unable to copy using clipboardData: \", err);\n      debug && console.error(\"falling back to prompt\");\n      message = format(\"message\" in options ? options.message : defaultMessage);\n      window.prompt(message, text);\n    }\n  } finally {\n    if (selection) {\n      if (typeof selection.removeRange == \"function\") {\n        selection.removeRange(range);\n      } else {\n        selection.removeAllRanges();\n      }\n    }\n\n    if (mark) {\n      document.body.removeChild(mark);\n    }\n    reselectPrevious();\n  }\n\n  return success;\n}\n\nmodule.exports = copy;\n","\nmodule.exports = function () {\n  var selection = document.getSelection();\n  if (!selection.rangeCount) {\n    return function () {};\n  }\n  var active = document.activeElement;\n\n  var ranges = [];\n  for (var i = 0; i < selection.rangeCount; i++) {\n    ranges.push(selection.getRangeAt(i));\n  }\n\n  switch (active.tagName.toUpperCase()) { // .toUpperCase handles XHTML\n    case 'INPUT':\n    case 'TEXTAREA':\n      active.blur();\n      break;\n\n    default:\n      active = null;\n      break;\n  }\n\n  selection.removeAllRanges();\n  return function () {\n    selection.type === 'Caret' &&\n    selection.removeAllRanges();\n\n    if (!selection.rangeCount) {\n      ranges.forEach(function(range) {\n        selection.addRange(range);\n      });\n    }\n\n    active &&\n    active.focus();\n  };\n};\n"],"names":["DurationText","durationText","startTime","endTime","useState","setRerenderCounter","endTimeToRender","Date","duration","dayjs","diff","refreshInterval","asMinutes","format","asHours","asDays","asMonths","asYears","useEffect","timeout","setInterval","counter","clearInterval","Typography","API_REFRESH_INTERVAL_MS","loading","open","style","zIndex","color","useStyles","makeStyles","theme","createStyles","root","backgroundColor","palette","background","paper","border","text","primary","padding","spacing","StyledTooltip","props","classes","tooltip","useHelpInfoStyles","helpIcon","grey","HelpInfo","children","className","interactive","title","fontSize","Link","React","ref","_props$color","_props$component","component","onBlur","onFocus","TypographyClasses","_props$underline","underline","_props$variant","variant","other","_objectWithoutProperties","_useIsFocusVisible","useIsFocusVisible","isFocusVisible","onBlurVisible","focusVisibleRef","_React$useState","focusVisible","setFocusVisible","handlerRef","useForkRef","_extends","clsx","concat","capitalize","button","event","withStyles","underlineNone","textDecoration","underlineHover","underlineAlways","position","WebkitTapHighlightColor","outline","margin","borderRadius","cursor","userSelect","verticalAlign","borderStyle","name","display","gridTemplateColumns","rowGap","columnGap","label","secondary","labelTooltip","marginLeft","contentContainer","alignItems","content","textOverflow","overflow","whiteSpace","MetadataContentField","copyIconClicked","setCopyIconClicked","undefined","link","startsWith","href","value","RouterLink","to","Tooltip","placement","IconButton","onClick","copy","copyableValue","onMouseEnter","onMouseLeave","setTimeout","size","FileCopyOutlined","MetadataList","metadataList","filteredMetadataList","filter","isAvailable","Box","map","idx","flex","paddingTop","paddingBottom","marginBottom","MetadataSection","header","marginTop","Paper","helpInfo","columns","JobTaskNameProgressTable","jobId","useJobProgressByTaskName","progress","page","setPage","total","TableContainer","Pagination","count","Math","ceil","pageSize","pageNo","onChange","_","Table","TableHead","TableRow","TableCell","align","justifyContent","TableBody","numFailed","numActive","numFinished","useStyle","taskProgressTable","params","useParams","msg","setMsg","refreshing","setRefresh","ipLogMap","useContext","GlobalContext","job","useSWR","getJobDetail","id","rsp","data","useJobDetail","useJobProgress","error","driverExists","Loading","TitleCard","StatusChip","type","status","tasksSectionContents","TaskProgressBar","Alert","severity","target","rel","showAsComplete","entrypoint","job_id","submission_id","start_time","end_time","Number","flexDirection","legendRoot","legendItemContainer","flexWrap","marginRight","colorLegend","width","height","progressBarRoot","segment","ProgressBar","unaccountedLabel","showLegend","showTooltip","segmentTotal","reduce","acc","finalTotal","filteredSegments","LegendTooltip","segments","useLegendStyles","numRunning","numPendingArgsAvail","numPendingNodeAssignment","numSubmittedToWorker","numUnknown","useTheme","success","main","MiniTaskProgressBar","setError","isRefreshing","useRef","current","getJobProgress","result","detail","onSwitchChange","checked","getJobProgressByTaskName","tasks","tasksWithTotals","task","slice","length","getJobList","get","jobIdQuery","_interopRequireDefault","require","_interopRequireWildcard","exports","_default","default","createElement","d","deselectCurrent","clipboardToIE11Formatting","module","options","debug","message","reselectPrevious","range","selection","mark","document","createRange","getSelection","textContent","ariaHidden","all","top","clip","webkitUserSelect","MozUserSelect","msUserSelect","addEventListener","e","stopPropagation","preventDefault","clipboardData","console","warn","window","clearData","setData","onCopy","body","appendChild","selectNodeContents","addRange","execCommand","Error","err","copyKey","test","navigator","userAgent","replace","prompt","removeRange","removeAllRanges","removeChild","rangeCount","active","activeElement","ranges","i","push","getRangeAt","tagName","toUpperCase","blur","forEach","focus"],"sourceRoot":""}