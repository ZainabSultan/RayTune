{"version":3,"file":"static/js/643.e6471be1.chunk.js","mappings":"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","sources":["common/RowStyles.tsx","common/constants.ts","components/Loading.tsx","components/PercentageBar.tsx","components/SearchComponent.tsx","components/StatesCounter.tsx","common/CustomTypography.tsx","common/UsageBar.tsx","pages/node/GPUColumn.tsx","pages/node/GRAMColumn.tsx","pages/node/NodeRow.tsx","pages/node/index.tsx","pages/node/hook/useNodeList.ts","util/converter.ts"],"sourcesContent":["import { createStyles, makeStyles } from \"@material-ui/core/styles\";\n\nconst rowStyles = makeStyles((theme) =>\n  createStyles({\n    expandCollapseIcon: {\n      color: theme.palette.text.secondary,\n      fontSize: \"1.5em\",\n      verticalAlign: \"middle\",\n    },\n    idCol: {\n      display: \"block\",\n      width: \"50px\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    OverflowCol: {\n      display: \"block\",\n      width: \"100px\",\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    },\n    helpInfo: {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n);\n\nexport default rowStyles;\n","export const API_REFRESH_INTERVAL_MS = 4000;\n","import { Backdrop, CircularProgress } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst Loading = ({ loading }: { loading: boolean }) => (\n  <Backdrop open={loading} style={{ zIndex: 100 }}>\n    <CircularProgress color=\"primary\" />\n  </Backdrop>\n);\n\nexport default Loading;\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { PropsWithChildren } from \"react\";\n\nconst useStyle = makeStyles((theme) => ({\n  container: {\n    background: \"linear-gradient(45deg, #21CBF3ee 30%, #2196F3ee 90%)\",\n    border: `1px solid #ffffffbb`,\n    padding: \"0 12px\",\n    height: 18,\n    lineHeight: \"18px\",\n    position: \"relative\",\n    boxSizing: \"content-box\",\n    borderRadius: 4,\n  },\n  displayBar: {\n    background: theme.palette.background.paper,\n    position: \"absolute\",\n    right: 0,\n    height: 18,\n    transition: \"0.5s width\",\n    borderRadius: 2,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: \"2px solid transparent\",\n    boxSizing: \"border-box\",\n  },\n  text: {\n    fontSize: 12,\n    zIndex: 2,\n    position: \"relative\",\n    color: theme.palette.text.primary,\n    width: \"100%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst PercentageBar = (\n  props: PropsWithChildren<{ num: number; total: number }>,\n) => {\n  const { num, total } = props;\n  const classes = useStyle();\n  const per = Math.round((num / total) * 100);\n\n  return (\n    <div className={classes.container}>\n      <div\n        className={classes.displayBar}\n        style={{\n          width: `${Math.min(Math.max(0, 100 - per), 100)}%`,\n        }}\n      />\n      <div className={classes.text}>{props.children}</div>\n    </div>\n  );\n};\n\nexport default PercentageBar;\n","import {\n  InputAdornment,\n  makeStyles,\n  MenuItem,\n  TextField,\n} from \"@material-ui/core\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme) => ({\n  search: {\n    margin: theme.spacing(1),\n    marginTop: 0,\n  },\n}));\n\nexport const SearchInput = ({\n  label,\n  onChange,\n  defaultValue,\n}: {\n  label: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}) => {\n  const classes = useStyles();\n\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      InputProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value);\n          }\n        },\n        defaultValue,\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <SearchOutlined />\n          </InputAdornment>\n        ),\n      }}\n    />\n  );\n};\n\nexport const SearchSelect = ({\n  label,\n  onChange,\n  options,\n}: {\n  label: string;\n  onChange?: (value: string) => void;\n  options: (string | [string, string])[];\n}) => {\n  const classes = useStyles();\n  return (\n    <TextField\n      className={classes.search}\n      size=\"small\"\n      label={label}\n      select\n      SelectProps={{\n        onChange: ({ target: { value } }) => {\n          if (onChange) {\n            onChange(value as string);\n          }\n        },\n        style: {\n          width: 100,\n        },\n      }}\n    >\n      <MenuItem value=\"\">All</MenuItem>\n      {options.map((e) =>\n        typeof e === \"string\" ? (\n          <MenuItem value={e}>{e}</MenuItem>\n        ) : (\n          <MenuItem value={e[0]}>{e[1]}</MenuItem>\n        ),\n      )}\n    </TextField>\n  );\n};\n","import { Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { StatusChip } from \"./StatusChip\";\n\nconst StateCounter = ({\n  type,\n  list,\n}: {\n  type: string;\n  list: { state: string }[];\n}) => {\n  const stateMap = {} as { [state: string]: number };\n  list.forEach(({ state }) => {\n    stateMap[state] = stateMap[state] + 1 || 1;\n  });\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      <Grid item>\n        <StatusChip status=\"TOTAL\" type={type} suffix={`x ${list.length}`} />\n      </Grid>\n      {Object.entries(stateMap).map(([s, num]) => (\n        <Grid key={s} item>\n          <StatusChip status={s} type={type} suffix={` x ${num}`} />\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n\nexport default StateCounter;\n","import { styled, Typography } from \"@material-ui/core\";\n\nexport const RightPaddedTypography = styled(Typography)(({ theme }) => ({\n  paddingRight: theme.spacing(1),\n}));\n","import { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport React from \"react\";\n\nconst blend = (\n  [r1, g1, b1]: number[],\n  [r2, g2, b2]: number[],\n  ratio: number,\n) => [\n  r1 * (1 - ratio) + r2 * ratio,\n  g1 * (1 - ratio) + g2 * ratio,\n  b1 * (1 - ratio) + b2 * ratio,\n];\n\nconst useUsageBarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      borderColor: theme.palette.divider,\n      borderStyle: \"solid\",\n      borderWidth: 1,\n      display: \"flex\",\n      flexGrow: 1,\n    },\n    inner: {\n      paddingLeft: theme.spacing(1),\n      paddingRight: theme.spacing(1),\n    },\n  }),\n);\n\ntype UsageBarProps = {\n  percent: number;\n  text: string;\n};\n\nconst UsageBar: React.FC<UsageBarProps> = ({ percent, text }) => {\n  const classes = useUsageBarStyles();\n  const safePercent = Math.max(Math.min(percent, 100), 0);\n  const minColor = [0, 255, 0];\n  const maxColor = [255, 0, 0];\n\n  const leftColor = minColor;\n  const rightColor = blend(minColor, maxColor, safePercent / 100);\n  const alpha = 0.2;\n\n  const gradient = `\n    linear-gradient(\n      to right,\n      rgba(${leftColor.join(\",\")}, ${alpha}) 0%,\n      rgba(${rightColor.join(\",\")}, ${alpha}) ${safePercent}%,\n      transparent ${safePercent}%\n    )\n  `;\n\n  // Use a nested `span` here because the right border is affected by the\n  // gradient background otherwise.\n  return (\n    <span className={classes.root}>\n      <span\n        className={classes.inner}\n        style={{ background: gradient, flexGrow: 1 }}\n      >\n        <Typography align=\"center\">{text}</Typography>\n      </span>\n    </span>\n  );\n};\n\nexport default UsageBar;\n","import { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RightPaddedTypography } from \"../../common/CustomTypography\";\nimport UsageBar from \"../../common/UsageBar\";\nimport { GPUStats, NodeDetail } from \"../../type/node\";\nimport { ResourceSlot, Worker } from \"../../type/worker\";\n\nexport const GPU_COL_WIDTH = 120;\n\ntype WorkerGPUEntryProps = {\n  resourceSlot: ResourceSlot;\n};\n\nexport const WorkerGPUEntry: React.FC<WorkerGPUEntryProps> = ({\n  resourceSlot,\n}) => {\n  const { allocation, slot } = resourceSlot;\n  // This is a bit of  a dirty hack . For some reason, the slot GPU slot\n  // 0 as assigned always shows up as undefined in the API response.\n  // There are other times, such as a partial allocation, where we truly don't\n  // know the slot, however this will just plug the hole of 0s coming through\n  // as undefined. I have not been able to figure out the root cause.\n  const slotMsg =\n    allocation >= 1 && slot === undefined\n      ? \"0\"\n      : slot === undefined\n      ? \"?\"\n      : slot.toString();\n  return (\n    <Typography variant=\"body1\">\n      [{slotMsg}]: {allocation}\n    </Typography>\n  );\n};\n\nexport type NodeGPUEntryProps = {\n  slot: number;\n  gpu: GPUStats;\n};\n\nexport const NodeGPUEntry: React.FC<NodeGPUEntryProps> = ({ gpu, slot }) => {\n  return (\n    <Box display=\"flex\" style={{ minWidth: GPU_COL_WIDTH }}>\n      <Tooltip title={gpu.name}>\n        <RightPaddedTypography variant=\"body1\">[{slot}]:</RightPaddedTypography>\n      </Tooltip>\n      {gpu.utilizationGpu !== undefined ? (\n        <UsageBar\n          percent={gpu.utilizationGpu}\n          text={`${gpu.utilizationGpu.toFixed(1)}%`}\n        />\n      ) : (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      )}\n    </Box>\n  );\n};\n\nexport const NodeGPUView = ({ node }: { node: NodeDetail }) => {\n  return (\n    <div style={{ minWidth: GPU_COL_WIDTH }}>\n      {node.gpus !== undefined && node.gpus.length !== 0 ? (\n        node.gpus.map((gpu, i) => (\n          <NodeGPUEntry key={gpu.uuid} gpu={gpu} slot={i} />\n        ))\n      ) : (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport const WorkerGPU = ({ worker }: { worker: Worker }) => {\n  const workerRes = worker.coreWorkerStats[0]?.usedResources;\n  const workerUsedGPUResources = workerRes?.[\"GPU\"];\n  let message;\n  if (workerUsedGPUResources === undefined) {\n    message = (\n      <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n        N/A\n      </Typography>\n    );\n  } else {\n    message = workerUsedGPUResources.resourceSlots\n      .sort((slot1, slot2) => {\n        if (slot1.slot === undefined && slot2.slot === undefined) {\n          return 0;\n        } else if (slot1.slot === undefined) {\n          return 1;\n        } else if (slot2.slot === undefined) {\n          return -1;\n        } else {\n          return slot1.slot - slot2.slot;\n        }\n      })\n      .map((resourceSlot) => (\n        <WorkerGPUEntry key={resourceSlot.slot} resourceSlot={resourceSlot} />\n      ));\n  }\n  return <div style={{ minWidth: 60 }}>{message}</div>;\n};\n","import { Box, Tooltip, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { RightPaddedTypography } from \"../../common/CustomTypography\";\nimport PercentageBar from \"../../components/PercentageBar\";\nimport { NodeDetail } from \"../../type/node\";\nimport { Worker } from \"../../type/worker\";\n\nconst GRAM_COL_WIDTH = 120;\n\nexport const NodeGRAM = ({ node }: { node: NodeDetail }) => {\n  const nodeGRAMEntries = (node.gpus ?? []).map((gpu, i) => {\n    const props = {\n      key: gpu.uuid,\n      gpuName: gpu.name,\n      utilization: gpu.memoryUsed,\n      total: gpu.memoryTotal,\n      slot: i,\n    };\n    return <GRAMEntry {...props} />;\n  });\n  return (\n    <div style={{ minWidth: 60 }}>\n      {nodeGRAMEntries.length === 0 ? (\n        <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n          N/A\n        </Typography>\n      ) : (\n        <div style={{ minWidth: GRAM_COL_WIDTH }}>{nodeGRAMEntries}</div>\n      )}\n    </div>\n  );\n};\n\nexport const WorkerGRAM = ({\n  worker,\n  node,\n}: {\n  worker: Worker;\n  node: NodeDetail;\n}) => {\n  const workerGRAMEntries = (node.gpus ?? [])\n    .map((gpu, i) => {\n      const process = gpu.processes.find(\n        (process) => process.pid === worker.pid,\n      );\n      if (!process) {\n        return undefined;\n      }\n      const props = {\n        key: gpu.uuid,\n        gpuName: gpu.name,\n        total: gpu.memoryTotal,\n        utilization: process.gpuMemoryUsage,\n        slot: i,\n      };\n      return <GRAMEntry {...props} />;\n    })\n    .filter((entry) => entry !== undefined);\n\n  return workerGRAMEntries.length === 0 ? (\n    <Typography color=\"textSecondary\" component=\"span\" variant=\"inherit\">\n      N/A\n    </Typography>\n  ) : (\n    <div style={{ minWidth: GRAM_COL_WIDTH }}>{workerGRAMEntries}</div>\n  );\n};\n\nconst getMiBRatioNoPercent = (used: number, total: number) =>\n  `${used}MiB/${total}MiB`;\n\ntype GRAMEntryProps = {\n  gpuName: string;\n  slot: number;\n  utilization: number;\n  total: number;\n};\n\nconst GRAMEntry: React.FC<GRAMEntryProps> = ({\n  gpuName,\n  slot,\n  utilization,\n  total,\n}) => {\n  const ratioStr = getMiBRatioNoPercent(utilization, total);\n  return (\n    <Box display=\"flex\" flexWrap=\"nowrap\" style={{ minWidth: GRAM_COL_WIDTH }}>\n      <Tooltip title={gpuName}>\n        <Box display=\"flex\" flexWrap=\"nowrap\">\n          <RightPaddedTypography variant=\"body1\">\n            [{slot}]:{\" \"}\n          </RightPaddedTypography>\n          <PercentageBar num={utilization} total={total}>\n            {ratioStr}\n          </PercentageBar>\n        </Box>\n      </Tooltip>\n    </Box>\n  );\n};\n","import {\n  Box,\n  IconButton,\n  TableCell,\n  TableRow,\n  Tooltip,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Remove\";\nimport { sortBy } from \"lodash\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport useSWR from \"swr\";\nimport { API_REFRESH_INTERVAL_MS } from \"../../common/constants\";\nimport rowStyles from \"../../common/RowStyles\";\nimport PercentageBar from \"../../components/PercentageBar\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport { getNodeDetail } from \"../../service/node\";\nimport { NodeDetail } from \"../../type/node\";\nimport { Worker } from \"../../type/worker\";\nimport { memoryConverter } from \"../../util/converter\";\nimport { NodeGPUView, WorkerGPU } from \"./GPUColumn\";\nimport { NodeGRAM, WorkerGRAM } from \"./GRAMColumn\";\n\nconst TEXT_COL_MIN_WIDTH = 100;\n\ntype NodeRowProps = Pick<NodeRowsProps, \"node\"> & {\n  /**\n   * Whether the node has been expanded to show workers\n   */\n  expanded: boolean;\n  /**\n   * Click handler for when one clicks on the expand/unexpand button in this row.\n   */\n  onExpandButtonClick: () => void;\n};\n\n/**\n * A single row that represents the node information only.\n * Does not show any data about the node's workers.\n */\nconst NodeRow = ({ node, expanded, onExpandButtonClick }: NodeRowProps) => {\n  const {\n    hostname = \"\",\n    ip = \"\",\n    cpu = 0,\n    mem,\n    disk,\n    networkSpeed = [0, 0],\n    raylet,\n    logUrl,\n  } = node;\n\n  const classes = rowStyles();\n\n  const objectStoreTotalMemory =\n    raylet.objectStoreAvailableMemory + raylet.objectStoreUsedMemory;\n\n  return (\n    <TableRow>\n      <TableCell>\n        <IconButton size=\"small\" onClick={onExpandButtonClick}>\n          {!expanded ? (\n            <AddIcon className={classes.expandCollapseIcon} />\n          ) : (\n            <RemoveIcon className={classes.expandCollapseIcon} />\n          )}\n        </IconButton>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Box minWidth={TEXT_COL_MIN_WIDTH}>{hostname}</Box>\n      </TableCell>\n      <TableCell>\n        <StatusChip type=\"node\" status={raylet.state} />\n      </TableCell>\n      <TableCell align=\"center\">\n        <Tooltip title={raylet.nodeId} arrow interactive>\n          <Link to={`/node/${raylet.nodeId}`} className={classes.idCol}>\n            {raylet.nodeId}\n          </Link>\n        </Tooltip>\n      </TableCell>\n      <TableCell align=\"center\">\n        <Box minWidth={TEXT_COL_MIN_WIDTH}>\n          {ip} {raylet.isHeadNode && \"(Head)\"}\n        </Box>\n      </TableCell>\n      <TableCell>\n        <Link to={`/log/${encodeURIComponent(logUrl)}`}>Log</Link>\n      </TableCell>\n      <TableCell>\n        <PercentageBar num={Number(cpu)} total={100}>\n          {cpu}%\n        </PercentageBar>\n      </TableCell>\n      <TableCell>\n        {mem && (\n          <PercentageBar num={Number(mem[0] - mem[1])} total={mem[0]}>\n            {memoryConverter(mem[0] - mem[1])}/{memoryConverter(mem[0])}(\n            {mem[2].toFixed(1)}\n            %)\n          </PercentageBar>\n        )}\n      </TableCell>\n      <TableCell>\n        <NodeGPUView node={node} />\n      </TableCell>\n      <TableCell>\n        <NodeGRAM node={node} />\n      </TableCell>\n      <TableCell>\n        {raylet && objectStoreTotalMemory && (\n          <PercentageBar\n            num={raylet.objectStoreUsedMemory}\n            total={objectStoreTotalMemory}\n          >\n            {memoryConverter(raylet.objectStoreUsedMemory)}/\n            {memoryConverter(objectStoreTotalMemory)}(\n            {(raylet.objectStoreUsedMemory / objectStoreTotalMemory).toFixed(2)}\n            %)\n          </PercentageBar>\n        )}\n      </TableCell>\n      <TableCell>\n        {disk && disk[\"/\"] && (\n          <PercentageBar num={Number(disk[\"/\"].used)} total={disk[\"/\"].total}>\n            {memoryConverter(disk[\"/\"].used)}/{memoryConverter(disk[\"/\"].total)}\n            ({disk[\"/\"].percent.toFixed(1)}%)\n          </PercentageBar>\n        )}\n      </TableCell>\n      <TableCell align=\"center\">{memoryConverter(networkSpeed[0])}/s</TableCell>\n      <TableCell align=\"center\">{memoryConverter(networkSpeed[1])}/s</TableCell>\n    </TableRow>\n  );\n};\n\ntype WorkerRowProps = {\n  /**\n   * Details of the worker\n   */\n  worker: Worker;\n  /**\n   * Detail of the node the worker is inside.\n   */\n  node: NodeDetail;\n};\n\n/**\n * A single row that represents the data of a Worker\n */\nconst WorkerRow = ({ node, worker }: WorkerRowProps) => {\n  const classes = rowStyles();\n\n  const { ip, mem, logUrl } = node;\n  const {\n    pid,\n    cpuPercent: cpu = 0,\n    memoryInfo,\n    coreWorkerStats,\n    cmdline,\n  } = worker;\n\n  const coreWorker = coreWorkerStats.length ? coreWorkerStats[0] : undefined;\n  const workerLogUrl = coreWorker\n    ? `/log/${encodeURIComponent(logUrl)}?fileName=${coreWorker.workerId}`\n    : `/log/${encodeURIComponent(logUrl)}`;\n\n  return (\n    <TableRow>\n      <TableCell>\n        {/* Empty because workers do not have an expand / unexpand button. */}\n      </TableCell>\n      <TableCell align=\"center\">{cmdline[0]}</TableCell>\n      <TableCell>\n        <StatusChip type=\"worker\" status=\"ALIVE\" />\n      </TableCell>\n      <TableCell align=\"center\">\n        {coreWorker && (\n          <Tooltip title={coreWorker.workerId} arrow interactive>\n            <span className={classes.idCol}>{coreWorker.workerId}</span>\n          </Tooltip>\n        )}\n      </TableCell>\n      <TableCell align=\"center\">{pid}</TableCell>\n      <TableCell>\n        <Link to={workerLogUrl} target=\"_blank\">\n          Logs\n        </Link>\n        <br />\n        <a\n          href={`/worker/traceback?pid=${pid}&ip=${ip}&native=0`}\n          target=\"_blank\"\n          title=\"Sample the current Python stack trace for this worker.\"\n          rel=\"noreferrer\"\n        >\n          Stack&nbsp;Trace\n        </a>\n        <br />\n        <a\n          href={`/worker/cpu_profile?pid=${pid}&ip=${ip}&duration=5&native=0`}\n          target=\"_blank\"\n          title=\"Profile the Python worker for 5 seconds (default) and display a flame graph.\"\n          rel=\"noreferrer\"\n        >\n          Flame&nbsp;Graph\n        </a>\n        <br />\n      </TableCell>\n      <TableCell>\n        <PercentageBar num={Number(cpu)} total={100}>\n          {cpu}%\n        </PercentageBar>\n      </TableCell>\n      <TableCell>\n        {mem && (\n          <PercentageBar num={memoryInfo.rss} total={mem[0]}>\n            {memoryConverter(memoryInfo.rss)}/{memoryConverter(mem[0])}(\n            {(memoryInfo.rss / mem[0]).toFixed(1)}\n            %)\n          </PercentageBar>\n        )}\n      </TableCell>\n      <TableCell>\n        <WorkerGPU worker={worker} />\n      </TableCell>\n      <TableCell>\n        <WorkerGRAM worker={worker} node={node} />\n      </TableCell>\n      <TableCell>N/A</TableCell>\n      <TableCell>N/A</TableCell>\n      <TableCell align=\"center\">N/A</TableCell>\n      <TableCell align=\"center\">N/A</TableCell>\n    </TableRow>\n  );\n};\n\ntype NodeRowsProps = {\n  /**\n   * Details of the node\n   */\n  node: NodeDetail;\n  /**\n   * Whether the node row should refresh data about its workers.\n   */\n  isRefreshing: boolean;\n  /**\n   * Whether the row should start expanded. By default, this is false.\n   */\n  startExpanded?: boolean;\n};\n\n/**\n * The rows related to a node and its workers. Expandable to show information about workers.\n */\nexport const NodeRows = ({\n  node,\n  isRefreshing,\n  startExpanded = false,\n}: NodeRowsProps) => {\n  const [isExpanded, setExpanded] = useState(startExpanded);\n\n  const { data } = useSWR(\n    [\"getNodeDetail\", node.raylet.nodeId],\n    async (_, nodeId) => {\n      const { data } = await getNodeDetail(nodeId);\n      const { data: rspData, result } = data;\n\n      if (result === false) {\n        console.error(\"Node Query Error Please Check Node Name\");\n      }\n\n      if (rspData?.detail) {\n        const sortedWorkers = sortBy(\n          rspData.detail.workers,\n          (worker) => worker.pid,\n        );\n        return sortedWorkers;\n      }\n    },\n    { refreshInterval: isRefreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  const workers = data ?? [];\n\n  const handleExpandButtonClick = () => {\n    setExpanded(!isExpanded);\n  };\n\n  return (\n    <React.Fragment>\n      <NodeRow\n        node={node}\n        expanded={isExpanded}\n        onExpandButtonClick={handleExpandButtonClick}\n      />\n      {isExpanded &&\n        workers.map((worker) => (\n          <WorkerRow key={worker.pid} node={node} worker={worker} />\n        ))}\n    </React.Fragment>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  Grid,\n  Paper,\n  Switch,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Loading from \"../../components/Loading\";\nimport PercentageBar from \"../../components/PercentageBar\";\nimport { SearchInput, SearchSelect } from \"../../components/SearchComponent\";\nimport StateCounter from \"../../components/StatesCounter\";\nimport { StatusChip } from \"../../components/StatusChip\";\nimport TitleCard from \"../../components/TitleCard\";\nimport { NodeDetail } from \"../../type/node\";\nimport { memoryConverter } from \"../../util/converter\";\nimport { useNodeList } from \"./hook/useNodeList\";\nimport { NodeRows } from \"./NodeRow\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n    width: \"100%\",\n    position: \"relative\",\n  },\n}));\n\nconst columns = [\n  \"\", // Expand button\n  \"Host / Cmd Line\",\n  \"State\",\n  \"ID\",\n  \"IP / PID\",\n  \"Actions\",\n  \"CPU Usage\",\n  \"Memory\",\n  \"GPU\",\n  \"GRAM\",\n  \"Object Store Memory\",\n  \"Disk(root)\",\n  \"Sent\",\n  \"Received\",\n];\n\nexport const brpcLinkChanger = (href: string) => {\n  const { location } = window;\n  const { pathname } = location;\n  const pathArr = pathname.split(\"/\");\n  if (pathArr.some((e) => e.split(\".\").length > 1)) {\n    const index = pathArr.findIndex((e) => e.includes(\".\"));\n    const resultArr = pathArr.slice(0, index);\n    resultArr.push(href);\n    return `${location.protocol}//${location.host}${resultArr.join(\"/\")}`;\n  }\n\n  return `http://${href}`;\n};\n\nexport const NodeCard = (props: { node: NodeDetail }) => {\n  const { node } = props;\n\n  if (!node) {\n    return null;\n  }\n\n  const { raylet, hostname, ip, cpu, mem, networkSpeed, disk, logUrl } = node;\n  const { nodeId, state, objectStoreUsedMemory, objectStoreAvailableMemory } =\n    raylet;\n\n  const objectStoreTotalMemory =\n    objectStoreUsedMemory + objectStoreAvailableMemory;\n\n  return (\n    <Paper variant=\"outlined\" style={{ padding: \"12px 12px\", margin: 12 }}>\n      <p style={{ fontWeight: \"bold\", fontSize: 12, textDecoration: \"none\" }}>\n        <Link to={`node/${nodeId}`}>{nodeId}</Link>{\" \"}\n      </p>\n      <p>\n        <Grid container spacing={1}>\n          <Grid item>\n            <StatusChip type=\"node\" status={state} />\n          </Grid>\n          <Grid item>\n            {hostname}({ip})\n          </Grid>\n          {networkSpeed && networkSpeed[0] >= 0 && (\n            <Grid item>\n              <span style={{ fontWeight: \"bold\" }}>Sent</span>{\" \"}\n              {memoryConverter(networkSpeed[0])}/s{\" \"}\n              <span style={{ fontWeight: \"bold\" }}>Received</span>{\" \"}\n              {memoryConverter(networkSpeed[1])}/s\n            </Grid>\n          )}\n        </Grid>\n      </p>\n      <Grid container spacing={1} alignItems=\"baseline\">\n        {cpu >= 0 && (\n          <Grid item xs>\n            CPU\n            <PercentageBar num={Number(cpu)} total={100}>\n              {cpu}%\n            </PercentageBar>\n          </Grid>\n        )}\n        {mem && (\n          <Grid item xs>\n            Memory\n            <PercentageBar num={Number(mem[0] - mem[1])} total={mem[0]}>\n              {memoryConverter(mem[0] - mem[1])}/{memoryConverter(mem[0])}(\n              {mem[2]}%)\n            </PercentageBar>\n          </Grid>\n        )}\n        {raylet && (\n          <Grid item xs>\n            Object Store Memory\n            <PercentageBar\n              num={objectStoreUsedMemory}\n              total={objectStoreTotalMemory}\n            >\n              {memoryConverter(objectStoreUsedMemory)}/\n              {memoryConverter(objectStoreTotalMemory)}\n            </PercentageBar>\n          </Grid>\n        )}\n        {disk && disk[\"/\"] && (\n          <Grid item xs>\n            Disk('/')\n            <PercentageBar num={Number(disk[\"/\"].used)} total={disk[\"/\"].total}>\n              {memoryConverter(disk[\"/\"].used)}/\n              {memoryConverter(disk[\"/\"].total)}({disk[\"/\"].percent}%)\n            </PercentageBar>\n          </Grid>\n        )}\n      </Grid>\n      <Grid container justify=\"flex-end\" spacing={1} style={{ margin: 8 }}>\n        <Grid>\n          <Button>\n            <Link to={`/log/${encodeURIComponent(logUrl)}`}>log</Link>\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nconst Nodes = () => {\n  const classes = useStyles();\n  const {\n    msg,\n    isRefreshing,\n    onSwitchChange,\n    nodeList,\n    changeFilter,\n    page,\n    setPage,\n    setSortKey,\n    setOrderDesc,\n    mode,\n    setMode,\n  } = useNodeList();\n\n  return (\n    <div className={classes.root}>\n      <Loading loading={msg.startsWith(\"Loading\")} />\n      <TitleCard title=\"NODES\">\n        Auto Refresh:\n        <Switch\n          checked={isRefreshing}\n          onChange={onSwitchChange}\n          name=\"refresh\"\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\n        />\n        <br />\n        Request Status: {msg}\n      </TitleCard>\n      <TitleCard title=\"Node Statistics\">\n        <StateCounter type=\"node\" list={nodeList} />\n      </TitleCard>\n      <TitleCard title=\"Node List\">\n        <Grid container alignItems=\"center\">\n          <Grid item>\n            <SearchInput\n              label=\"Host\"\n              onChange={(value) => changeFilter(\"hostname\", value.trim())}\n            />\n          </Grid>\n          <Grid item>\n            <SearchInput\n              label=\"IP\"\n              onChange={(value) => changeFilter(\"ip\", value.trim())}\n            />\n          </Grid>\n          <Grid item>\n            <SearchSelect\n              label=\"State\"\n              onChange={(value) => changeFilter(\"state\", value.trim())}\n              options={[\"ALIVE\", \"DEAD\"]}\n            />\n          </Grid>\n          <Grid item>\n            <SearchInput\n              label=\"Page Size\"\n              onChange={(value) =>\n                setPage(\"pageSize\", Math.min(Number(value), 500) || 10)\n              }\n            />\n          </Grid>\n          <Grid item>\n            <SearchSelect\n              label=\"Sort By\"\n              options={[\n                [\"state\", \"State\"],\n                [\"mem[2]\", \"Used Memory\"],\n                [\"mem[0]\", \"Total Memory\"],\n                [\"cpu\", \"CPU\"],\n                [\"networkSpeed[0]\", \"Sent\"],\n                [\"networkSpeed[1]\", \"Received\"],\n                [\"disk./.used\", \"Used Disk\"],\n              ]}\n              onChange={(val) => setSortKey(val)}\n            />\n          </Grid>\n          <Grid item>\n            <span style={{ margin: 8, marginTop: 0 }}>\n              Reverse:\n              <Switch onChange={(_, checked) => setOrderDesc(checked)} />\n            </span>\n          </Grid>\n          <Grid item>\n            <ButtonGroup size=\"small\">\n              <Button\n                onClick={() => setMode(\"table\")}\n                color={mode === \"table\" ? \"primary\" : \"default\"}\n              >\n                Table\n              </Button>\n              <Button\n                onClick={() => setMode(\"card\")}\n                color={mode === \"card\" ? \"primary\" : \"default\"}\n              >\n                Card\n              </Button>\n            </ButtonGroup>\n          </Grid>\n        </Grid>\n        <div>\n          <Pagination\n            count={Math.ceil(nodeList.length / page.pageSize)}\n            page={page.pageNo}\n            onChange={(e, pageNo) => setPage(\"pageNo\", pageNo)}\n          />\n        </div>\n        {mode === \"table\" && (\n          <TableContainer>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  {columns.map((col) => (\n                    <TableCell align=\"center\" key={col}>\n                      {col}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {nodeList\n                  .slice(\n                    (page.pageNo - 1) * page.pageSize,\n                    page.pageNo * page.pageSize,\n                  )\n                  .map((node) => (\n                    <NodeRows\n                      key={node.raylet.nodeId}\n                      node={node}\n                      isRefreshing={isRefreshing}\n                      startExpanded={nodeList.length === 1}\n                    />\n                  ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n        {mode === \"card\" && (\n          <Grid container>\n            {nodeList\n              .slice(\n                (page.pageNo - 1) * page.pageSize,\n                page.pageNo * page.pageSize,\n              )\n              .map((e) => (\n                <Grid item xs={6}>\n                  <NodeCard node={e} />\n                </Grid>\n              ))}\n          </Grid>\n        )}\n      </TitleCard>\n    </div>\n  );\n};\n\nexport default Nodes;\n","import _ from \"lodash\";\nimport { useState } from \"react\";\nimport useSWR from \"swr\";\nimport { API_REFRESH_INTERVAL_MS } from \"../../../common/constants\";\nimport { getNodeList } from \"../../../service/node\";\nimport { useSorter } from \"../../../util/hook\";\n\nexport const useNodeList = () => {\n  const [msg, setMsg] = useState(\"Loading the nodes infos...\");\n  const [isRefreshing, setRefresh] = useState(true);\n  const [mode, setMode] = useState(\"table\");\n  const [filter, setFilter] = useState<\n    { key: \"hostname\" | \"ip\" | \"state\"; val: string }[]\n  >([]);\n  const [page, setPage] = useState({ pageSize: 10, pageNo: 1 });\n  const { sorterFunc, setOrderDesc, setSortKey, sorterKey } = useSorter(\"\");\n  const changeFilter = (key: \"hostname\" | \"ip\" | \"state\", val: string) => {\n    const f = filter.find((e) => e.key === key);\n    if (f) {\n      f.val = val;\n    } else {\n      filter.push({ key, val });\n    }\n    setFilter([...filter]);\n  };\n  const onSwitchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRefresh(event.target.checked);\n  };\n  const { data } = useSWR(\n    \"useNodeList\",\n    async () => {\n      const { data } = await getNodeList();\n      const { data: rspData, msg } = data;\n      if (msg) {\n        setMsg(msg);\n      } else {\n        setMsg(\"\");\n      }\n      return rspData.summary;\n    },\n    { refreshInterval: isRefreshing ? API_REFRESH_INTERVAL_MS : 0 },\n  );\n\n  const nodeList = data ?? [];\n\n  const nodeListWithState = nodeList\n    .map((e) => ({\n      ...e,\n      state: e.raylet.state,\n    }))\n    .sort(sorterFunc);\n\n  const sortedList = _.sortBy(nodeListWithState, [\n    (obj) => !obj.raylet.isHeadNode,\n    // sort by alive first, then alphabetically for other states\n    (obj) => (obj.raylet.state === \"ALIVE\" ? \"0\" : obj.raylet.state),\n    (obj) => obj.raylet.nodeId,\n  ]);\n\n  return {\n    nodeList: sortedList.filter((node) =>\n      filter.every((f) => node[f.key] && node[f.key].includes(f.val)),\n    ),\n    msg,\n    isRefreshing,\n    onSwitchChange,\n    changeFilter,\n    page,\n    originalNodes: nodeList,\n    setPage: (key: string, val: number) => setPage({ ...page, [key]: val }),\n    sorterKey,\n    setSortKey,\n    setOrderDesc,\n    mode,\n    setMode,\n  };\n};\n","export const memoryConverter = (bytes: number) => {\n  if (bytes < 1024) {\n    return `${bytes.toFixed(4)}KB`;\n  }\n\n  if (bytes < 1024 ** 2) {\n    return `${(bytes / 1024 ** 1).toFixed(2)}KB`;\n  }\n\n  if (bytes < 1024 ** 3) {\n    return `${(bytes / 1024 ** 2).toFixed(2)}MB`;\n  }\n\n  if (bytes < 1024 ** 4) {\n    return `${(bytes / 1024 ** 3).toFixed(2)}GB`;\n  }\n\n  if (bytes < 1024 ** 5) {\n    return `${(bytes / 1024 ** 4).toFixed(2)}TB`;\n  }\n\n  if (bytes < 1024 ** 6) {\n    return `${(bytes / 1024 ** 5).toFixed(2)}TB`;\n  }\n\n  return \"\";\n};\n"],"names":["rowStyles","makeStyles","theme","createStyles","expandCollapseIcon","color","palette","text","secondary","fontSize","verticalAlign","idCol","display","width","overflow","textOverflow","whiteSpace","OverflowCol","helpInfo","marginLeft","spacing","API_REFRESH_INTERVAL_MS","loading","open","style","zIndex","useStyle","container","background","border","padding","height","lineHeight","position","boxSizing","borderRadius","displayBar","paper","right","transition","borderTopLeftRadius","borderBottomLeftRadius","primary","textAlign","props","num","total","classes","per","Math","round","className","min","max","children","useStyles","search","margin","marginTop","SearchInput","label","onChange","defaultValue","size","InputProps","value","target","endAdornment","SearchSelect","options","select","SelectProps","map","e","type","list","stateMap","forEach","state","alignItems","item","status","suffix","length","Object","entries","s","RightPaddedTypography","styled","Typography","paddingRight","useUsageBarStyles","root","borderColor","divider","borderStyle","borderWidth","flexGrow","inner","paddingLeft","percent","safePercent","minColor","leftColor","rightColor","ratio","r1","g1","b1","blend","gradient","join","align","WorkerGPUEntry","resourceSlot","allocation","slot","slotMsg","undefined","toString","variant","NodeGPUEntry","gpu","Box","minWidth","Tooltip","title","name","utilizationGpu","toFixed","component","NodeGPUView","node","gpus","i","uuid","WorkerGPU","message","workerRes","worker","coreWorkerStats","usedResources","workerUsedGPUResources","resourceSlots","sort","slot1","slot2","NodeGRAM","nodeGRAMEntries","key","gpuName","utilization","memoryUsed","memoryTotal","GRAMEntry","WorkerGRAM","workerGRAMEntries","process","processes","find","pid","gpuMemoryUsage","filter","entry","ratioStr","used","getMiBRatioNoPercent","flexWrap","PercentageBar","NodeRow","expanded","onExpandButtonClick","hostname","ip","cpu","mem","disk","networkSpeed","raylet","logUrl","objectStoreTotalMemory","objectStoreAvailableMemory","objectStoreUsedMemory","TableRow","TableCell","IconButton","onClick","Remove","Add","StatusChip","nodeId","arrow","interactive","to","isHeadNode","encodeURIComponent","Number","memoryConverter","WorkerRow","cpuPercent","memoryInfo","cmdline","coreWorker","workerLogUrl","workerId","href","rel","rss","NodeRows","isRefreshing","startExpanded","useState","isExpanded","setExpanded","useSWR","_","getNodeDetail","data","rspData","result","console","error","detail","sortedWorkers","sortBy","workers","refreshInterval","columns","brpcLinkChanger","location","window","pathArr","pathname","split","some","index","findIndex","includes","resultArr","slice","push","protocol","host","NodeCard","Paper","fontWeight","textDecoration","Grid","xs","justify","Button","msg","setMsg","setRefresh","mode","setMode","setFilter","pageSize","pageNo","page","setPage","useSorter","sorterFunc","setOrderDesc","setSortKey","sorterKey","getNodeList","summary","nodeList","nodeListWithState","obj","every","f","val","onSwitchChange","event","checked","changeFilter","originalNodes","useNodeList","Loading","startsWith","TitleCard","Switch","inputProps","trim","ButtonGroup","Pagination","count","ceil","TableContainer","Table","TableHead","col","TableBody","bytes"],"sourceRoot":""}